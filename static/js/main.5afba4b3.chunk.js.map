{"version":3,"sources":["features/account/Account.module.css","app/hooks.ts","features/login/Styles.js","features/user/userApi.ts","features/user/userSlice.ts","features/login/Login.tsx","features/account/Account.jsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppSelector","useSelector","btn","light","dark","css","btnDefault","btnPrimary","styled","div","fetchUser","createAsyncThunk","a","axios","get","response","data","user","results","photo","picture","large","firstName","name","first","lastName","last","userSlice","createSlice","initialState","status","isFetching","isSuccess","isError","reducers","clearState","state","extraReducers","builder","addCase","fulfilled","payload","pending","rejected","selectUser","actions","MyForm","dispatch","useDispatch","history","useHistory","useEffect","toast","error","push","Styles","onSubmit","render","handleSubmit","component","placeholder","type","Login","Account","className","styles","card","card__img","src","alt","card__name","App","exact","path","store","configureStore","reducer","userReduser","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5afba4b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Account_card__2I3LG\",\"card__name\":\"Account_card__name__33vBe\",\"card__img\":\"Account_card__img__1wX7V\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import styled, { css } from \"styled-components\";\n\nconst btn = (light, dark) => css`\n  white-space: nowrap;\n  display: inline-block;\n  border-radius: 5px;\n  padding: 5px 15px;\n  font-size: 16px;\n  color: white;\n  &:visited {\n    color: white;\n  }\n  background-image: linear-gradient(${light}, ${dark});\n  border: 1px solid ${dark};\n  &:hover {\n    background-image: linear-gradient(${light}, ${dark});\n    &[disabled] {\n      background-image: linear-gradient(${light}, ${dark});\n    }\n  }\n  &:visited {\n    color: black;\n  }\n  &[disabled] {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n`;\n\nconst btnDefault = css`\n  ${btn(\"#ffffff\", \"#d5d5d5\")} color: #555;\n`;\n\nconst btnPrimary = btn(\"#4f93ce\", \"#285f8f\");\n\nexport default styled.div`\n  font-family: sans-serif;\n\n  h1 {\n    text-align: center;\n    color: #222;\n  }\n\n  & > div {\n    text-align: center;\n  }\n\n  a {\n    display: block;\n    text-align: center;\n    color: #222;\n  }\n\n  form {\n    max-width: 500px;\n    margin: 10px auto;\n    border: 1px solid #ccc;\n    padding: 20px;\n    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);\n    border-radius: 3px;\n\n    & > div {\n      display: flex;\n      flex-flow: row nowrap;\n      line-height: 2em;\n      margin: 5px;\n      & > label {\n        color: #333;\n        width: 110px;\n        font-size: 1em;\n        line-height: 32px;\n      }\n      & > input,\n      & > select,\n      & > textarea {\n        flex: 1;\n        padding: 3px 5px;\n        font-size: 1em;\n        margin-left: 15px;\n        border: 1px solid #ccc;\n        border-radius: 3px;\n      }\n      & > input[type=\"checkbox\"] {\n        margin-top: 7px;\n      }\n      & > div {\n        margin-left: 16px;\n        & > label {\n          display: block;\n          & > input {\n            margin-right: 3px;\n          }\n        }\n      }\n    }\n    & > .buttons {\n      display: flex;\n      flex-flow: row nowrap;\n      justify-content: center;\n      margin-top: 15px;\n    }\n    button {\n      margin: 0 10px;\n      &[type=\"submit\"] {\n        ${btnPrimary};\n      }\n      &[type=\"button\"] {\n        ${btnDefault};\n      }\n    }\n    pre {\n      border: 1px solid #ccc;\n      background: rgba(0, 0, 0, 0.1);\n      box-shadow: inset 1px 1px 3px rgba(0, 0, 0, 0.2);\n      padding: 20px;\n    }\n  }\n`;\n","import axios from \"axios\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { User } from \".\";\n\ntype RandomUserResponse = {\n  results: {\n    picture: {\n      large: string;\n    };\n    name: {\n      first: string;\n      last: string;\n    };\n  }[];\n};\n\nexport const fetchUser = createAsyncThunk<User>(\"user/fetchUser\", async () => {\n  const response = (\n    await axios.get<RandomUserResponse>(\"https://randomuser.me/api/\")\n  ).data;\n  let user = response.results[0];\n  return {\n    photo: user.picture.large,\n    firstName: user.name.first,\n    lastName: user.name.last,\n  };\n});\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { fetchUser } from \"./userApi\";\n\nexport type User = {\n  firstName: string;\n  lastName: string;\n  photo: string;\n};\n\nexport type State = {\n  user: User;\n  status: {\n    isFetching: boolean;\n    isSuccess: boolean;\n    isError: boolean;\n  };\n};\n\nconst initialState: State = {\n  user: {\n    photo: \"\",\n    firstName: \"\",\n    lastName: \"\",\n  },\n  status: {\n    isFetching: false,\n    isSuccess: false,\n    isError: false,\n  },\n};\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    clearState: (state) => {\n      state.status.isError = false;\n      state.status.isSuccess = false;\n      state.status.isFetching = false;\n      return state;\n    },\n  },\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchUser.fulfilled, (state, { payload }) => {\n        state.status.isFetching = false;\n        state.status.isSuccess = true;\n        state.user = payload;\n      })\n      .addCase(fetchUser.pending, (state) => {\n        state.status.isFetching = true;\n      })\n      .addCase(fetchUser.rejected, (state) => {\n        state.status.isFetching = false;\n        state.status.isError = true;\n      });\n  },\n});\n\nexport const selectUser = (state: RootState) => state.user.user;\nexport const status = (state: RootState) => state.user.status;\n\nexport const { clearState } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import React from \"react\";\nimport { useEffect } from \"react\";\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\nimport Styles from \"./Styles\";\nimport { Form, Field } from \"react-final-form\";\nimport { fetchUser } from \"../user/userApi\";\nimport { clearState, status } from \"../user/userSlice\";\nimport { useHistory } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\n\nexport function MyForm() {\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n  const { isSuccess, isError } = useAppSelector(status);\n\n  useEffect(\n    () => () => {\n      dispatch(clearState());\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (isError) {\n      toast.error(\"Please, check your login or password\");\n      dispatch(clearState());\n    }\n\n    if (isSuccess) {\n      dispatch(clearState());\n      history.push(\"/account\");\n    }\n  });\n\n  const onSubmit = () => dispatch(fetchUser());\n\n  return (\n    <Styles>\n      <div>\n        <Form\n          onSubmit={onSubmit}\n          render={({ handleSubmit }) => (\n            <form onSubmit={handleSubmit}>\n              <div>\n                <Field name=\"login\" component=\"input\" placeholder=\"login\" />\n              </div>\n              <div>\n                <Field\n                  name=\"password\"\n                  placeholder=\"password\"\n                  component=\"input\"\n                />\n              </div>\n\n              <button type=\"submit\">Log in</button>\n            </form>\n          )}\n        />\n      </div>\n    </Styles>\n  );\n}\n\nexport function Login() {\n  return (\n    <div>\n      <MyForm />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { selectUser } from \"../user/userSlice\";\nimport styles from \"./Account.module.css\";\n\nexport function Account() {\n  let user = useAppSelector(selectUser);\n  return (\n    <div className={styles.card}>\n      <div>\n        <img className={styles.card__img} src={user.photo} alt=\"\" />\n      </div>\n      <div>\n        <div className={styles.card__name}>First Name: {user.firstName}</div>\n        <div className={styles.card__name}>Last Name: {user.lastName}</div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Login } from \"./features/login/Login\";\nimport { Account } from \"./features/account/Account\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact component={Login} path=\"/login\" />\n          <Route exact component={Account} path=\"/account\" />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport userReduser from \"../features/user/userSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    user: userReduser,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}